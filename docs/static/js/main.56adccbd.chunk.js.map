{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","squares","renderSquare","i","Game","status","useState","Array","fill","history","setHistory","stepNumber","setstepNumber","xIsNext","setXIsNext","localHistory","current","winner","calculateWinner","moves","map","step","move","desc","jumpTo","slice","length","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"oMAIMA,EAAS,SAACC,GACd,OACE,wBAAQC,UAAU,SAASC,QAAUF,EAAME,QAA3C,SACGF,EAAMG,SAKPC,EAAQ,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,QAASH,EAAc,EAAdA,QAElBI,EAAe,SAACC,GACpB,OACE,cAACR,EAAD,CACEI,MAAQE,EAAQE,GAChBL,QAAU,kBAAMA,EAAQK,OAK9B,OACE,gCACE,sBAAKN,UAAU,YAAf,UACGK,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKL,UAAU,YAAf,UACGK,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKL,UAAU,YAAf,UACGK,EAAa,GACbA,EAAa,GACbA,EAAa,UAMhBE,EAAO,SAACR,GAEZ,IAsCIS,EAtCJ,EAA8BC,mBAAS,CAAC,CAAEL,QAASM,MAAM,GAAGC,KAAK,SAAjE,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAoCJ,mBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KAqBMC,EAAeN,EACfO,EAAUD,EAAaJ,GACvBM,EAASC,EAAgBF,EAAQf,SAEjCkB,EAAQJ,EAAaK,KAAI,SAACC,EAAMC,GACpC,IAAMC,EAAOD,EACX,eAAiBA,EACjB,mBACF,OACE,6BACE,wBAAQxB,QAAS,kBAhBR,SAACuB,GACdT,EAAcS,GACdP,EAAYO,EAAO,IAAO,GAcCG,CAAOF,IAA9B,SAAuCC,KADhCD,MAab,OALEjB,EADEY,EACO,UAAYA,EAEZ,iBAAoBJ,EAAU,IAAM,KAI7C,sBAAKhB,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACG,EAAD,CACEC,QAAUe,EAAQf,QAClBH,QAAU,SAACK,GAAD,OA9CE,SAACA,GACnB,IAAMY,EAAeN,EAAQgB,MAAM,EAAGd,EAAa,GAE7CV,EADUc,EAAaA,EAAaW,OAAS,GAC3BzB,QAAQwB,QAC3BP,EAAgBjB,IAAYA,EAAQE,KAGzCF,EAAQE,GAAKU,EAAU,IAAM,IAC7BH,EAAW,GAAD,mBAAMK,GAAN,CAAoB,CAAEd,cAChCW,EAAcG,EAAaW,QAC3BZ,GAAYD,IAoCWc,CAAYxB,QAGjC,sBAAKN,UAAU,YAAf,UACE,8BAAOQ,IACP,6BAAKc,WAcb,SAASD,EAAgBjB,GAWvB,IAVA,IAAM2B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAzB,EAAI,EAAGA,EAAIyB,EAAMF,OAAQvB,IAAK,CACrC,kBAAkByB,EAAMzB,GAAxB,GAAO0B,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAI9B,EAAQ4B,IAAM5B,EAAQ4B,KAAO5B,EAAQ6B,IAAM7B,EAAQ4B,KAAO5B,EAAQ8B,GACpE,OAAO9B,EAAQ4B,GAGnB,OAAO,KAtBTG,IAASC,OACP,cAAC7B,EAAD,IACA8B,SAASC,eAAe,W","file":"static/js/main.56adccbd.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nconst Square = (props) => {\r\n  return (\r\n    <button className=\"square\" onClick={ props.onClick } >\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nconst Board = ({ squares, onClick }) => {\r\n\r\n  const renderSquare = (i) => {\r\n    return (\r\n      <Square \r\n        value={ squares[i] } \r\n        onClick={ () => onClick(i) }\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(0)}\r\n        {renderSquare(1)}\r\n        {renderSquare(2)}\r\n      </div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(3)}\r\n        {renderSquare(4)}\r\n        {renderSquare(5)}\r\n      </div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(6)}\r\n        {renderSquare(7)}\r\n        {renderSquare(8)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Game = (props) => {\r\n\r\n  const [history, setHistory] = useState([{ squares: Array(9).fill(null) }]);\r\n  const [stepNumber, setstepNumber] = useState(0);\r\n  const [xIsNext, setXIsNext] = useState(true)\r\n\r\n  const handleClick = (i) => {\r\n    const localHistory = history.slice(0, stepNumber + 1);\r\n    const current = localHistory[localHistory.length - 1];\r\n    const squares = current.squares.slice();\r\n    if ( calculateWinner(squares) || squares[i] ) {\r\n      return;\r\n    }\r\n    squares[i] = xIsNext ? 'X' : 'O';\r\n    setHistory([ ...localHistory, { squares }]);\r\n    setstepNumber(localHistory.length);\r\n    setXIsNext(!xIsNext);\r\n  }\r\n\r\n  const jumpTo = (step) => {\r\n    setstepNumber(step);\r\n    setXIsNext((step % 2) === 0);\r\n  }\r\n\r\n  \r\n  const localHistory = history;\r\n  const current = localHistory[stepNumber];\r\n  const winner = calculateWinner(current.squares);\r\n\r\n  const moves = localHistory.map((step, move) => {\r\n    const desc = move ?\r\n      'Go to move #' + move :\r\n      'Go to game start';\r\n    return (\r\n      <li key={move}>\r\n        <button onClick={() => jumpTo(move)} >{desc}</button>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  let status;\r\n  if (winner) {\r\n    status = 'Winner ' + winner;\r\n  } else {\r\n    status = 'Next player: ' + ( xIsNext ? 'X' : 'O' );\r\n  }\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        <Board \r\n          squares={ current.squares }\r\n          onClick={ (i) => handleClick(i) }\r\n        />\r\n      </div>\r\n      <div className=\"game-info\">\r\n        <div>{ status }</div>\r\n        <ol>{moves}</ol>\r\n      </div>\r\n    </div>\r\n  );\r\n  \r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}"],"sourceRoot":""}